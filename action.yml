name: "Godot Builder"
author: chtzvt
description: Builds Godot Engine games with cross-compilation support for macOS.
branding:
  icon: 'thumbs-up'  
  color: 'white'

inputs:
  osxcross-sdk-url: 
    description: "Base URL of where to find macOS SDKs"
    required: false
    default: "https://cdn.ctis.me/file/ctisme-cdn/files-pub/ext/water-museum/macos-sdk"
  osxcross-debug: 
    description: "Enable osxcross debug output"
    required: false
    default: "false"
  osxcross-osx-version: 
    description: "Osxcross target version"
    required: false
    default: "13.0"
  godot-relpath:
    description: "Relative path for Godot builds"
    required: false
    default: .
  godot-executable-url:
    description: "URL of a Godot headless executable"
    required: false
    default: "https://cdn.ctis.me/file/ctisme-cdn/files-pub/ext/water-museum/godot/Godot_v3.5.1-stable_linux_headless.64.zip"
  godot-export-templates-url:
    description: "URL of Godot export templates"
    required: false
    default: "https://cdn.ctis.me/file/ctisme-cdn/files-pub/ext/water-museum/godot/Godot_v3.5.1-stable_export_templates.tpz"
  godot-debug:
    description: "Enable debug mode for builds"
    required: false
    default: false
  godot-verbose:
    description: "Enable verbose output during build"
    required: false
    default: false
  godot-v4:
    description: "Use Godot v4"
    required: false
    default: false
  godot-encrypt-scripts:
    description: "Enable script encryption in Godot build"
    required: false
    default: false
  artifact-retention-days:
    description: "Number of days to retain build artifacts"
    required: false
    default: "3"
  version: 
    description: "A version number to identify the build"
    required: false 
    default: "version_unknown"
  build-config: 
    description: "Filename of export presets configuration"
    required: false 
    default: "export_presets_all.cfg"
  channel: 
    description: "Name of release channel (used in feature flags)"
    required: true 
  disable-steam-sdk: 
    description: "Whether or not to enable the Steam SDK in builds"
    required: false 
    default: false
  steam-sdk-url:
    description: "URL of a Steam SDK ZIP file"
    required: false 
    default: "https://cdn.ctis.me/file/ctisme-cdn/files-pub/ext/water-museum/steam-sdk/steamworks_sdk_155.zip"

runs:
  using: "composite"
  steps:
    - name: Check out game repository
      uses: actions/checkout@v2.3.1
      with:
        fetch-depth: 0
    - name: Install Wine
      shell: bash
      id: wine_install
      run: |
        sudo apt update
        sudo apt -y install wine64
        echo "WINE_PATH=$(which wine64)" >> $GITHUB_OUTPUT
    - name: Install Blender
      shell: bash
      run: |
        curl -o blender.tar.xz https://cdn.ctis.me/file/ctisme-cdn/files-pub/ext/water-museum/blender/blender-3.6.5-linux-x64.tar.xz
        tar xf blender.tar.xz && mv -v $(ls -d */ | grep blender) $HOME/blender
    - name: Install Build Tools
      shell: bash
      id: binutils_install
      run: |
        sudo apt -y install binutils build-essential openssl gvfs
    - name: Install osxcross
      id: osxcross_install
      uses: The-Water-Museum/setup-osxcross@v1.5
      with:
        osx-version: ${{ inputs.osxcross-osx-version }}
        sdk-url: ${{ inputs.osxcross-sdk-url }}
        debug: ${{ inputs.osxcross-debug }}
    - name: "Apply base build configurations"
      shell: bash
      run: |
          # Overwrite export presets with alternate tip build config
          cp buildcfgs/${{ inputs.build-config }} export_presets.cfg
          cp buildcfgs/override_presets.cfg override.cfg
    - name: Get date
      shell: bash
      run: |
          echo "BUILD_DATE=$(date --rfc-3339=date)" >> ${GITHUB_ENV}
    - shell: bash
      name: Configure Script Encryption
      if: ${{ inputs.godot-encrypt-scripts == 'true' }}
      run: | 
          echo "SCRIPT_AES256_ENCRYPTION_KEY=`openssl rand -hex 32`" >> $GITHUB_ENV
          sed -i 's/script_encryption_key=".*"/script_encryption_key="${{ env.SCRIPT_AES256_ENCRYPTION_KEY }}"/g' ./export_presets.cfg
    - shell: bash
      name: Configure Steam SDK
      run: | 
            echo "STEAM_SDK_LOCATION=$(pwd)/../steam_sdk" >> $GITHUB_ENV
            # Fixes ERROR: Code Signing: Ad-hoc signed applications require the 'Disable Library Validation' entitlement to load dynamic libraries.
            sed -i 's+codesign/entitlements/disable_library_validation=false+codesign/entitlements/disable_library_validation=true+g' ./export_presets.cfg
    - shell: bash
      name: Install Steam SDK
      if: ${{ inputs.disable-steam-sdk == 'false' }}
      run: | 
            curl -o ./steam_sdk.zip ${{ inputs.steam-sdk-url }}
            mkdir -p ${{ env.STEAM_SDK_LOCATION }}
            unzip -qq -o ./steam_sdk.zip -d ${{ env.STEAM_SDK_LOCATION }}
            rm -f ./steam_sdk.zip
            sed -i 's+sdk_dir = ".*"+sdk_dir = "${{ env.STEAM_SDK_LOCATION }}/sdk"+g' ./addons/steam_api/settings.tres || true
    - shell: bash
      name: Disable Steam SDK
      if: ${{ inputs.disable-steam-sdk == 'true' }}
      run: | 
          sed -i 's/disable = false/disable = true/g' ./addons/steam_api/settings.tres || true
    - name: Configure Godot Blender Settings
      shell: bash
      run: |
          mkdir -pv ~/.config/godot
          echo -e "[gd_resource type=\"EditorSettings\" format=3]\n\n[resource]\nfilesystem/import/blender/blender3_path = \"$HOME/blender\"" > ~/.config/godot/editor_settings-4.tres
    - name: "Embed export version metadata"
      shell: bash
      run: |
          sed -i 's/application\/file_description=".*"/application\/file_description="${{ inputs.version }}"/g' ./export_presets.cfg
          sed -i 's/application\/file_version=".*"/application\/file_version="${{ inputs.version }}"/g' ./export_presets.cfg
          sed -i 's/application\/product_version=".*"/application\/product_version="${{ inputs.version }}"/g' ./export_presets.cfg
          sed -i 's/application\/short_version=".*"/application\/short_version="${{ inputs.version }}"/g' ./export_presets.cfg
          sed -i 's/application\/version=".*"/application\/version="${{ inputs.version }}"/g' ./export_presets.cfg
          sed -i 's/application\/info=".*"/application\/info="${{ inputs.version }}"/g' ./export_presets.cfg
    - name: "Stamp build information"
      shell: bash
      run: |
          sed -i 's/info\/version=".*"/info\/version="${{ inputs.version }}"/g' ./project.godot
          sed -i 's/info\/date=".*"/info\/date="${{ env.BUILD_DATE }}"/g' ./project.godot
          sed -i 's/info\/commit_sha=".*"/info\/commit_sha="${{ github.sha }}"/g' ./project.godot
          sed -i 's/info\/channel=".*"/info\/channel="${{ inputs.channel }}"/g' ./project.godot
          sed -i 's/info\/version=".*"/info\/version="${{ inputs.version }}"/g' ./override.cfg
          sed -i 's/info\/date=".*"/info\/date="${{ env.BUILD_DATE }}"/g' ./override.cfg
          sed -i 's/info\/commit_sha=".*"/info\/commit_sha="${{ github.sha }}"/g' ./override.cfg
          sed -i 's/info\/channel=".*"/info\/channel="${{ inputs.channel }}"/g' ./override.cfg
    - name: Override application title with version info for non-stable releases
      if: "!contains(inputs.version, '-stable')"
      shell: bash
      run: |
          echo '' >>./override.cfg
          echo "[application]" >>./override.cfg
          echo 'config/name="${{ inputs.version }}"' >>./override.cfg
    - name: Build Game with Godot Engine
      id: build
      uses: The-Water-Museum/godot-export@v5.2.0
      with:
        godot_executable_download_url: ${{ inputs.godot-executable-url }}
        godot_export_templates_download_url: ${{ inputs.godot-export-templates-url }}
        relative_project_path: ${{ inputs.godot-relpath }}
        archive_output: true
        wine_path: ${{ steps.wine_install.outputs.WINE_PATH }}
        export_debug: ${{ inputs.godot-debug }}
        verbose: ${{ inputs.godot-verbose }}
        use_godot_4: ${{ inputs.godot-v4 }}
        cache: true
    - name: Upload HTML5 build artifact
      uses: actions/upload-artifact@v3
      with:
        name: build-HTML5
        path: ${{ steps.build.outputs.archive_directory }}/HTML5.zip
        if-no-files-found: ignore
        retention-days: ${{ inputs.artifact-retention-days }}
    - name: Upload Windows build artifact
      uses: actions/upload-artifact@v3
      with:
        name: build-Windows
        path: ${{ steps.build.outputs.archive_directory }}/Windows.zip
        if-no-files-found: ignore
        retention-days: ${{ inputs.artifact-retention-days }}
    - name: Upload Linux build artifact
      uses: actions/upload-artifact@v3
      with:
        name: build-Linux_X11
        path: ${{ steps.build.outputs.archive_directory }}/Linux_X11.zip
        if-no-files-found: ignore
        retention-days: ${{ inputs.artifact-retention-days }}
    - name: Upload macOS build artifact
      uses: actions/upload-artifact@v3
      with:
        name: build-macOS
        path: ${{ steps.build.outputs.archive_directory }}/macOS.zip
        if-no-files-found: ignore
        retention-days: ${{ inputs.artifact-retention-days }}
